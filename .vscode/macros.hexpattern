#def(minimum_distillation)(
Dioscuri Gambit
Minimus Distillation
Rotation Gambit II
Augur's Exaltation
)

#def(maximum_distillation)(
Dioscuri Gambit
Maximus Distillation
Rotation Gambit II
Augur's Exaltation
)

#def(armor_compensator)(
// get d and t
Prospector's Gambit
Boxer's Purification
Rotation Gambit
Squire's Purification

// find D_0A
Numerical Reflection(1)
Prospector's Gambit
Numerical Reflection(125)
Division Distillation
Subtractive Distillation

Numerical Reflection(3)
Fisherman's Gambit II
Jester's Gambit
Division Distillation

// find D_0B
Rotation Gambit II
Numerical Reflection(25)
Subtractive Distillation
Jester's Gambit
Numerical Reflection(8)
Additive Distillation

Dioscuri Gambit
Multiplicative Distillation
Rotation Gambit II

Undertaker's Gambit
{@num(0.5)} >>
Power Distillation
Rotation Gambit II

Numerical Reflection(2)
Power Distillation
Multiplicative Distillation

Numerical Reflection(5)
Fisherman's Gambit
Numerical Reflection(400)
Multiplicative Distillation
Additive Distillation

{@num(0.5)} >>
Power Distillation
Multiplicative Distillation
Additive Distillation

Numerical Reflection(8)
Division Distillation

// return whichever one is correct
$maximum_distillation
)

#def(bury_iota)(
Flock's Reflection
Flock's Gambit
Retrograde Purification
Speaker's Decomposition
Integration Distillation
Retrograde Purification
Flock's Disintegration
)

#def(dig_iota)(
Flock's Reflection
Flock's Gambit
Speaker's Decomposition
Integration Distillation
Flock's Disintegration
)

#def(conditional_continue)(
{
    Introspection
    Bookkeeper's Gambit(-)
    Retrospection
}
Flock's Disintegration
Bookkeeper's Gambit(v)
Augur's Exaltation
Hermes' Gambit
)

#def(muninns_purification)(
Muninn's Reflection
Gemini Decomposition
Nullary Reflection
Equality Distillation
Rotation Gambit II
Augur's Exaltation
)

#def(muninns_gambit_two)(
$muninns_purification
Huginn's Gambit
)

#def(linear_impulse)(
// save previous ravenmind
    Muninn's Reflection
    Rotation Gambit II

    // on the first iteration, normalize the impulse vector and get its length
    // or just push 0 if it's the zero vector to avoid dividing by zero
    Gemini Decomposition
    Vector Reflection Zero
    Inequality Distillation
    {
        Gemini Decomposition
        Length Purification
        Undertaker's Gambit
        Division Distillation
        Jester's Gambit
    }
    {
        Numerical Reflection: 0
    }
    Augur's Exaltation
    
    // recursive function to actually do the impulse
    {
        // is the remaining speed greater than 1?
        Gemini Decomposition
        Numerical Reflection: 1
        Maximus Distillation
        
        // if so, impulse by the unit vector (length 1) and decrement the speed
        // then do the recursive function again
        {
            Rotation Gambit II
            Dioscuri Gambit
            Impulse
            Rotation Gambit
            Numerical Reflection: 1
            Subtractive Distillation
        }
        Muninn's Reflection
        Combination Distillation
        
        // otherwise, impulse by the remaining speed and don't recurse
        {
            Multiplicative Distillation
            Impulse
        }

        Augur's Exaltation
        Hermes' Gambit
    }
    Gemini Decomposition
    Huginn's Gambit
    Combination Distillation
    Hermes' Gambit

    // restore previous ravenmind
    Huginn's Gambit
)